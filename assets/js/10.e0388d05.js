(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{212:function(t,v,_){"use strict";_.r(v);var r=_(0),a=Object(r.a)({},(function(){var t=this,v=t.$createElement,_=t._self._c||v;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("h1",{attrs:{id:"二叉搜索树"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#二叉搜索树"}},[t._v("#")]),t._v(" 二叉搜索树")]),t._v(" "),_("ul",[_("li",[t._v("左子树小于根节点")]),t._v(" "),_("li",[t._v("右子数大于根节点")])]),t._v(" "),_("h2",{attrs:{id:"验证二叉搜索树"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#验证二叉搜索树"}},[t._v("#")]),t._v(" 验证二叉搜索树")]),t._v(" "),_("ol",[_("li",[t._v("中序遍历")]),t._v(" "),_("li",[t._v("递归")])]),t._v(" "),_("ul",[_("li",[t._v("找左子树的最大值")]),t._v(" "),_("li",[t._v("找右子数的最小值")]),t._v(" "),_("li",[t._v("root > max & min < root 即为二叉搜索树")])]),t._v(" "),_("h2",{attrs:{id:"二叉树-二叉搜索树的最近公共祖先"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#二叉树-二叉搜索树的最近公共祖先"}},[t._v("#")]),t._v(" 二叉树&二叉搜索树的最近公共祖先")]),t._v(" "),_("ol",[_("li",[t._v("路径查找（逐级向上），最后比较")]),t._v(" "),_("li",[t._v("递归")])]),t._v(" "),_("ul",[_("li",[t._v("find(root, p, q) root == q or root = p return root")]),t._v(" "),_("li",[t._v("find(root.left, p, q)")]),t._v(" "),_("li",[t._v("find(root.right, p, q)")])]),t._v(" "),_("h3",{attrs:{id:"leetcode"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#leetcode"}},[t._v("#")]),t._v(" leetcode")]),t._v(" "),_("ul",[_("li",[t._v("235")]),t._v(" "),_("li",[t._v("236")])]),t._v(" "),_("h2",{attrs:{id:"二叉树的遍历"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#二叉树的遍历"}},[t._v("#")]),t._v(" 二叉树的遍历")]),t._v(" "),_("ul",[_("li",[t._v("前序遍历（根左右）")]),t._v(" "),_("li",[t._v("中序遍历（左根右）")]),t._v(" "),_("li",[t._v("后序遍历（左右根）")])])])}),[],!1,null,null,null);v.default=a.exports}}]);