(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{221:function(t,v,_){"use strict";_.r(v);var a=_(0),l=Object(a.a)({},(function(){var t=this,v=t.$createElement,_=t._self._c||v;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("h1",{attrs:{id:"快速排序算法"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#快速排序算法"}},[t._v("#")]),t._v(" 快速排序算法")]),t._v(" "),_("p",[_("code",[t._v("原地不稳定算法")])]),t._v(" "),_("ul",[_("li",[t._v("先分区，在处理子问题（由上到下）")])]),t._v(" "),_("h2",{attrs:{id:"快排实现"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#快排实现"}},[t._v("#")]),t._v(" 快排实现")]),t._v(" "),_("p",[t._v("分区")]),t._v(" "),_("ul",[_("li",[t._v("找基准值")]),t._v(" "),_("li",[t._v("基准值小的放左边，基准值大的放右边")]),t._v(" "),_("li",[t._v("递归两边（基准值）")])]),t._v(" "),_("h2",{attrs:{id:"时间复杂度"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#时间复杂度"}},[t._v("#")]),t._v(" 时间复杂度")]),t._v(" "),_("p",[t._v("二叉树分析法")]),t._v(" "),_("blockquote",[_("p",[t._v("描述")])]),t._v(" "),_("p",[t._v("n 个节点的二叉树，每个节点代表一个基准值，n 个节点代表了 n 个基准值")]),t._v(" "),_("ul",[_("li",[t._v("选择基准值\n"),_("ul",[_("li",[t._v("待排序区间尽量选择中间的数字，最好时间复杂度为 nlog2n")]),t._v(" "),_("li",[t._v("待排序区间选择最大最小值，最差时间复杂度为 n^2")])])])]),t._v(" "),_("h2",{attrs:{id:"快排优化"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#快排优化"}},[t._v("#")]),t._v(" 快排优化")]),t._v(" "),_("ul",[_("li",[t._v("单边递归优化")]),t._v(" "),_("li",[t._v("基准值取值优化，三点取中法")]),t._v(" "),_("li",[t._v("分区操作优化")])]),t._v(" "),_("h2",{attrs:{id:"代码实现"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#代码实现"}},[t._v("#")]),t._v(" 代码实现")]),t._v(" "),_("ul",[_("li",[_("p",[t._v("选择最左值作为基准值时，先从右边开始处理")])]),t._v(" "),_("li",[_("p",[t._v("选择最右值作为基准值时，先从左边开始处理")])]),t._v(" "),_("li",[_("p",[t._v("三点取中法（返回左右 依然遵守上方规则）")])])])])}),[],!1,null,null,null);v.default=l.exports}}]);