(window.webpackJsonp=window.webpackJsonp||[]).push([[35],{239:function(a,t,s){"use strict";s.r(t);var v=s(0),e=Object(v.a)({},(function(){var a=this,t=a.$createElement,s=a._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h1",{attrs:{id:"event-loop"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#event-loop"}},[a._v("#")]),a._v(" Event Loop")]),a._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[a._v("GO")]),a._v(" "),s("p",[a._v("🔥事件队列 异步 进程 线程")])]),a._v(" "),s("h2",{attrs:{id:"cpu"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#cpu"}},[a._v("#")]),a._v(" CPU")]),a._v(" "),s("p",[s("code",[a._v("（中央处理器central processing unit）一座工厂")])]),a._v(" "),s("h2",{attrs:{id:"进程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#进程"}},[a._v("#")]),a._v(" 进程")]),a._v(" "),s("p",[s("code",[a._v("一座工厂的A，B，C...车间 A为主 A车间运行，其他车间停止运行")])]),a._v(" "),s("h2",{attrs:{id:"线程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#线程"}},[a._v("#")]),a._v(" 线程")]),a._v(" "),s("p",[s("code",[a._v("一座工厂里面的工人，共同辅助协调完成同一项工作")])]),a._v(" "),s("h2",{attrs:{id:"cpu、进程、线程之间的关系"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#cpu、进程、线程之间的关系"}},[a._v("#")]),a._v(" CPU、进程、线程之间的关系")]),a._v(" "),s("p",[a._v("🐶 "),s("code",[a._v("进程")]),a._v("是cpu资源分配的最小单元（是能拥有资源和独立运行的最小单位）")]),a._v(" "),s("p",[a._v("🐶 "),s("code",[a._v("线程")]),a._v("是cpu调度的最小单位（线程是建立在进程的基础上的一次程序运行单位，一个进程中可以有多个线程）")]),a._v(" "),s("p",[a._v("🐶 不同"),s("code",[a._v("进程")]),a._v("之间也可以通信，代价较大")]),a._v(" "),s("p",[a._v("🐶 "),s("code",[a._v("单线程")]),a._v("与"),s("code",[a._v("多线程")]),a._v("，都是指在一个"),s("code",[a._v("进程")]),a._v("内的单和多")]),a._v(" "),s("h2",{attrs:{id:"浏览器是多进程的"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#浏览器是多进程的"}},[a._v("#")]),a._v(" 浏览器是多进程的")]),a._v(" "),s("p",[a._v("🀄️ 浏览器是多进程的")]),a._v(" "),s("p",[a._v("🀄️ 每一个tab页，就是一个独立的进程")]),a._v(" "),s("h2",{attrs:{id:"浏览器包含了哪些进程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#浏览器包含了哪些进程"}},[a._v("#")]),a._v(" 浏览器包含了哪些进程")]),a._v(" "),s("p",[a._v("🀄️ 主进程")]),a._v(" "),s("div",{staticClass:"language-md extra-class"},[s("pre",{pre:!0,attrs:{class:"language-md"}},[s("code",[a._v("  👎 协调控制其他子进程（创建、销毁）\n\n  👎 浏览器界面显示，用户交互，前进、后退、收藏\n\n  👎 将渲染进程得到的内存中的bitmap，绘制到用户界面上\n\n  👎 处理不可见操作，网络操作，文件访问\n")])])]),s("p",[a._v("🀄️ 第三方插件进程")]),a._v(" "),s("div",{staticClass:"language-md extra-class"},[s("pre",{pre:!0,attrs:{class:"language-md"}},[s("code",[a._v("  "),s("span",{pre:!0,attrs:{class:"token code keyword"}},[a._v("`👎 每个插件一个进程，使用的时候，进程被创建`")]),a._v("\n")])])]),s("p",[a._v("🀄️ GPU进程")]),a._v(" "),s("div",{staticClass:"language-md extra-class"},[s("pre",{pre:!0,attrs:{class:"language-md"}},[s("code",[a._v("  👎 用于3D绘制等\n")])])]),s("p",[a._v("🀄️ 渲染进程（浏览器内核）")]),a._v(" "),s("div",{staticClass:"language-md extra-class"},[s("pre",{pre:!0,attrs:{class:"language-md"}},[s("code",[a._v("  👎 负责页面渲染，脚本执行，事件处理等\n\n  👎 每个tab页一个渲染进程\n")])])]),s("h2",{attrs:{id:"浏览器内核（渲染进程）"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#浏览器内核（渲染进程）"}},[a._v("#")]),a._v(" 浏览器内核（渲染进程）")]),a._v(" "),s("p",[a._v("✅ GUI渲染进程")]),a._v(" "),s("div",{staticClass:"language-md extra-class"},[s("pre",{pre:!0,attrs:{class:"language-md"}},[s("code",[a._v("  👎 负责渲染页面，布局和绘制\n\n  👎 页面需要重绘和回流时，该线程就会执行\n\n  👎 与js引擎互斥，防止渲染结果不可预期\n")])])]),s("p",[a._v("✅ JS引擎线程")]),a._v(" "),s("div",{staticClass:"language-md extra-class"},[s("pre",{pre:!0,attrs:{class:"language-md"}},[s("code",[a._v("  👎 负责处理解析和执行JavaScript脚本程序\n  \n  👎 只有一个JS引擎线程（单线程）\n\n  👎 与GUI渲染线程互斥，防止渲染结果不可预期\n")])])]),s("p",[a._v("✅ 事件触发线程")]),a._v(" "),s("div",{staticClass:"language-md extra-class"},[s("pre",{pre:!0,attrs:{class:"language-md"}},[s("code",[a._v("  👎 用来控制事件循环（鼠标点击，setTimeout，ajax）\n\n  👎 当事件满足触发条件时，将事件放入到JS引擎所在的执行队列中\n")])])]),s("p",[a._v("✅ 定时触发器线程")]),a._v(" "),s("div",{staticClass:"language-md extra-class"},[s("pre",{pre:!0,attrs:{class:"language-md"}},[s("code",[a._v("  👎 setInterval 与 setTimeout 所在的线程\n\n  👎 定时任务并不是由JS引擎计时的，是由定时触发线程来计时的\n\n  👎 计时完毕后，通知事件触发线程\n")])])]),s("p",[a._v("✅ 异步http请求线程")]),a._v(" "),s("div",{staticClass:"language-md extra-class"},[s("pre",{pre:!0,attrs:{class:"language-md"}},[s("code",[a._v("  👎 浏览器有一个单独的线程用于处理AJAX请求\n\n  👎 当请求完成时，若有回调函数，通知时间触发线程\n")])])]),s("h2",{attrs:{id:"javascript单线程？"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#javascript单线程？"}},[a._v("#")]),a._v(" JavaScript单线程？")]),a._v(" "),s("p",[s("code",[a._v("多线程需要加锁，同时操作DOM，在多线程不加锁的情况下，最终会导致DOM渲染的结果不可预期")])]),a._v(" "),s("h2",{attrs:{id:"gui渲染线程与js引擎线程互斥？"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#gui渲染线程与js引擎线程互斥？"}},[a._v("#")]),a._v(" GUI渲染线程与JS引擎线程互斥？")]),a._v(" "),s("p",[s("code",[a._v("当JS引擎线程执行时，GUI渲染线程会被挂起，GUI更新则会被保存在一个队列中等待JS引擎线程空闲时立即被执行")])]),a._v(" "),s("h2",{attrs:{id:"event-loop-go"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#event-loop-go"}},[a._v("#")]),a._v(" Event Loop GO")]),a._v(" "),s("p",[a._v("⌚️同步任务和异步任务")]),a._v(" "),s("p",[a._v("⌚️同步任务在js引擎线程上执行，形成一个执行栈")]),a._v(" "),s("p",[a._v("⌚️事件触发线程管理一个任务队列，异步任务触发条件达成，将回调事件放到任务队列中")]),a._v(" "),s("p",[a._v("⌚️执行栈中所有同步任务执行完毕，js引擎线程空闲，系统会读取")]),a._v(" "),s("img",{attrs:{src:"/ent-docs/001.png"}}),a._v(" "),s("p",[a._v("👌宏任务 --\x3e 事件队列（循环）")]),a._v(" "),s("p",[a._v("👌微任务 --\x3e 微任务队列")]),a._v(" "),s("img",{attrs:{src:"/ent-docs/002.png"}}),a._v(" "),s("p",[s("code",[a._v("宏任务完成立即执行当前一轮的微任务")])]),a._v(" "),s("p",[a._v("😯 执行一个宏任务（栈中没有从事件队列中获取）")]),a._v(" "),s("p",[a._v("😯 执行过程中如果遇到微任务，添加到微任务对列")]),a._v(" "),s("p",[a._v("😯 宏任务执行完毕吼，立即执行当前微任务队列的所有微任务")]),a._v(" "),s("p",[a._v("😯 宏任务执行完毕，开始检查渲染，然后GUI线程接管渲染")]),a._v(" "),s("p",[a._v("😯 渲染完毕后，js线程继续接管，开始下一个宏任务（事件队列）")]),a._v(" "),s("img",{attrs:{src:"/ent-docs/003.png"}})])}),[],!1,null,null,null);t.default=e.exports}}]);